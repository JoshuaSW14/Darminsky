@page "/caitlin"

<link rel="stylesheet" href="css/Christmas.css">

<h1 class="text-center my-4 christmas-title">25 Days of Loving You</h1>

<div class="container">
    <div class="row justify-content-center">
        @foreach (var box in boxes)
        {
            <div class="col-md-4 col-lg-3 mb-4">
                <div class="card box-card @(currentDate >= box.Day ? "unlocked" : "locked")">
                    <div class="card-body text-center">
                        @if (currentDate >= box.Day && animationComplete)
                        {
                            <p class="card-text reveal-text">@box.Gift</p>
                        }

                        @if (currentDate >= box.Day)
                        {
                            <div class="svg-box-wrapper">
                                <div class="svg-box animate" @onclick="FinishAnimation">
                                    <svg width="100" height="100" viewBox="0 0 100 100">
                                        <!-- Base of the box -->
                                        <rect x="20" y="50" width="60" height="40" fill="#ff6347" />
                                        <!-- Lid of the box -->
                                        <rect x="20" y="30" width="60" height="20" fill="#ff0000" class="svg-lid" />
                                    </svg>
                                </div>
                            </div>
                        }
                        else
                        {
                            <h5 class="card-title">@box.Title</h5>
                            <p class="card-text">Gift Locked</p>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private List<Box> boxes = new List<Box>();
    private DateTime currentDate = DateTime.Now;
    private bool animationComplete = false;

    private void FinishAnimation()
    {
        animationComplete = true;
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        for (int i = 1; i <= 25; i++)
        {
            boxes.Add(new Box
                {
                    Title = $"Day {i}",
                    Day = new DateTime(2024, 12, i, 11, 8, 0),
                    Gift = i == 1 ? "Starbucks Gift Card" : $"Gift for Day {i}"
                });
        }

        // Start a timer to refresh the UI
        _ = Task.Run(UpdateUIAsync);
    }

    private async Task UpdateUIAsync()
    {
        while (true)
        {
            currentDate = DateTime.Now;

            // Check if the UI needs an update
            if (boxes.Any(box => currentDate >= box.Day))
            {
                await InvokeAsync(StateHasChanged);
            }

            // Wait for 1 second before checking again
            await Task.Delay(1000);
        }
    }

    public class Box
    {
        public string Title { get; set; }
        public DateTime Day { get; set; }
        public string Gift { get; set; }
    }
}